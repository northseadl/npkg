// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package kerrs

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NOT_FOUND.String() && e.Code == 404
}

func ErrorNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsInvalidParams(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_PARAMS.String() && e.Code == 400
}

func ErrorInvalidParams(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_INVALID_PARAMS.String(), fmt.Sprintf(format, args...))
}

func IsUnAuthorization(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UN_AUTHORIZATION.String() && e.Code == 401
}

func ErrorUnAuthorization(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_UN_AUTHORIZATION.String(), fmt.Sprintf(format, args...))
}

func IsUnKnow(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UN_KNOW.String() && e.Code == 500
}

func ErrorUnKnow(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UN_KNOW.String(), fmt.Sprintf(format, args...))
}

func IsInvalidOperation(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_INVALID_OPERATION.String() && e.Code == 400
}

func ErrorInvalidOperation(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_INVALID_OPERATION.String(), fmt.Sprintf(format, args...))
}

func IsTooManyRequest(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TOO_MANY_REQUEST.String() && e.Code == 429
}

func ErrorTooManyRequest(format string, args ...interface{}) *errors.Error {
	return errors.New(429, ErrorReason_TOO_MANY_REQUEST.String(), fmt.Sprintf(format, args...))
}
